class Node:
    def __init__(self, val):
        self.val = val
        self.next = None
        self.prev = None


class MyLinkedList:

    def __init__(self):
       
        self.head = None
        self.size = 0
        
        
        

    def get(self, index: int) -> int:
       
        if index < 0 or index >= self.size: return -1
        
        
        if self.head is None:
            return -1
        
        curr = self.head
        
        for i in range(index):
            curr = curr.next
        
        return curr.val
            
        
        

    def addAtHead(self, val: int) -> None:
       
        node = Node(val)
        if self.head is None:
            self.head = node
        else:
            node.next = self.head
            node.prev = None
            self.head.prev = node
            self.head = node
        self.size += 1
        

    def addAtTail(self, val: int) -> None:
        
        last = Node(val)
        curr = self.head
        if curr is None:
            self.head = last
        else:  
            while curr.next is not None:
                curr = curr.next
        
            curr.next = last
            last.prev = curr
        self.size += 1

    def addAtIndex(self, index: int, val: int) -> None:
        
        if index > self.size or index < 0:
            return
    
        if index == 0:
            self.addAtHead(val)
        else:
            curr = self.head
            for i in range(index - 1):
                curr = curr.next
            new_node = Node(val)
            if curr.next is not None:
                curr.next.prev = new_node
                new_node.prev = curr
                new_node.next = curr.next
                curr.next = new_node
            else:
                curr.next = new_node
                new_node.prev = curr
            
            
        self.size += 1
            
    def deleteAtIndex(self, index: int) -> None:
        
        if index < 0 or index >= self.size:
            return
        
        curr = self.head
        
        if index == 0:
            if self.size == 1: self.head = None
            else:
                self.head = curr.next
                self.head.prev = None
        
        else:
            for i in range(index):
                curr = curr.next
            if curr.next:
                curr.prev.next = curr.next
                curr.next.prev = curr.prev

            else:
                curr.prev.next = None
                
            
            
        self.size -= 1
        


